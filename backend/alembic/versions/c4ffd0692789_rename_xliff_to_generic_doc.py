"""Rename XLIFF to generic doc

Revision ID: c4ffd0692789
Revises: 15355f38c714
Create Date: 2024-07-30 22:37:56.493442

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# pylint: disable=E1101

# revision identifiers, used by Alembic.
revision: str = 'c4ffd0692789'
down_revision: Union[str, None] = '15355f38c714'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # drop constraints on all foreign keys to rename them
    op.drop_constraint('xliff_record_to_tmx_tmx_id_fkey', 'xliff_record_to_tmx')
    op.drop_constraint('xliff_record_to_tmx_xliff_id_fkey', 'xliff_record_to_tmx')
    op.drop_constraint('xliff_record_document_id_fkey', 'xliff_record')

    # rename tables
    op.rename_table('xliff_record_to_tmx', 'doc_to_tmx')
    op.rename_table('xliff_document', 'document')
    op.rename_table('xliff_record', 'document_record')

    # update table internals
    op.alter_column('doc_to_tmx', 'xliff_id', new_column_name='doc_id')

    # add foreign keys back to rename them
    op.create_foreign_key(None, 'doc_to_tmx', 'document', ['doc_id'], ['id'])
    op.create_foreign_key(None, 'doc_to_tmx', 'tmx_document', ['tmx_id'], ['id'])
    op.create_foreign_key(None, 'document_record', 'document', ['document_id'], ['id'])

    # op.create_table('xliff_document',
    #     sa.Column('id', sa.Integer(), nullable=False),
    #     sa.Column('parent_id', sa.Integer(), nullable=False),
    #     sa.Column('original_document', sa.String(), nullable=False),
    #     sa.ForeignKeyConstraint(['parent_id'], ['document.id']),
    #     sa.PrimaryKeyConstraint("id"),
    # )
    # op.execute('''
    #     INSERT INTO xliff_document (parent_id, original_document)
    #     SELECT d.id, d.original_document
    #     FROM document d
    # ''')

    # op.create_table('xliff_record',
    #     sa.Column('id', sa.Integer(), nullable=False),
    #     sa.Column('parent_id', sa.Integer(), nullable=False),
    #     sa.Column('segment_id', sa.Integer(), nullable=False),
    #     sa.Column('document_id', sa.Integer(), nullable=False),
    #     sa.Column('state', sa.String(), nullable=False),
    #     sa.Column('approved', sa.Boolean(), nullable=False),
    #     sa.ForeignKeyConstraint(['parent_id'], ['document_record.id']),
    #     # sa.ForeignKeyConstraint(['document_id'], ['xliff_document.id']),
    #     sa.PrimaryKeyConstraint("id"),
    # )

    # op.execute('''
    #     INSERT INTO xliff_record (parent_id, segment_id, document_id, state, approved)
    #     SELECT r.id, r.segment_id, r.document_id, r.state, r.approved
    #     FROM document_record r
    # ''')
    # op.execute('''
    #     UPDATE xliff_record r
    #     SET document_id = d.id
    #     FROM xliff_document d
    #     WHERE r.document_id = d.parent_id
    # ''')


    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('document',
    #     sa.Column('id', sa.Integer(), nullable=False),
    #     sa.Column('name', sa.String(), nullable=False),
    #     sa.Column('created_by', sa.Integer(), nullable=False),
    #     sa.Column('processing_status', sa.String(), nullable=False),
    #     sa.Column('upload_time', sa.DateTime(), nullable=False),
    #     sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    #     sa.PrimaryKeyConstraint('id')
    # )
    # op.create_table('doc_to_tmx',
    #     sa.Column('doc_id', sa.Integer(), nullable=False),
    #     sa.Column('tmx_id', sa.Integer(), nullable=False),
    #     sa.ForeignKeyConstraint(['doc_id'], ['document.id'], ),
    #     sa.ForeignKeyConstraint(['tmx_id'], ['tmx_document.id'], )
    # )
    # op.create_table('document_record',
    #     sa.Column('id', sa.Integer(), nullable=False),
    #     sa.Column('document_id', sa.Integer(), nullable=False),
    #     sa.Column('source', sa.String(), nullable=False),
    #     sa.Column('target', sa.String(), nullable=False),
    #     sa.ForeignKeyConstraint(['document_id'], ['document.id'], ),
    #     sa.PrimaryKeyConstraint('id')
    # )
    # op.drop_table('xliff_record_to_tmx')
    # op.add_column('xliff_document', sa.Column('parent_id', sa.Integer(), nullable=False))
    # op.drop_constraint('xliff_document_user_id_key', 'xliff_document', type_='foreignkey')
    # op.create_foreign_key(None, 'xliff_document', 'document', ['parent_id'], ['id'])
    # op.drop_column('xliff_document', 'upload_time')
    # op.drop_column('xliff_document', 'processing_status')
    # op.drop_column('xliff_document', 'name')
    # op.drop_column('xliff_document', 'created_by')
    # op.add_column('xliff_record', sa.Column('parent_id', sa.Integer(), nullable=False))
    # op.create_foreign_key(None, 'xliff_record', 'document_record', ['parent_id'], ['id'])
    # op.drop_column('xliff_record', 'target')
    # op.drop_column('xliff_record', 'source')
    # ### end Alembic commands ###


def downgrade() -> None:
    # drop newly created foreign keys
    op.drop_constraint('doc_to_tmx_doc_id_fkey', 'doc_to_tmx')
    op.drop_constraint('doc_to_tmx_tmx_id_fkey', 'doc_to_tmx')
    op.drop_constraint('document_record_document_id_fkey', 'document_record')

    # rename table internals back to original name
    op.alter_column('doc_to_tmx', 'doc_id', new_column_name='xliff_id')

    # rename table back to original name
    op.rename_table('document_record', 'xliff_record')
    op.rename_table('document', 'xliff_document')
    op.rename_table('doc_to_tmx', 'xliff_record_to_tmx')

    # create foreign keys back
    op.create_foreign_key(None, 'xliff_record', 'xliff_document', ['document_id'], ['id'])
    op.create_foreign_key(None, 'xliff_record_to_tmx', 'xliff_document', ['xliff_id'], ['id'])
    op.create_foreign_key(None, 'xliff_record_to_tmx', 'tmx_document', ['tmx_id'], ['id'])

    # op.execute('''
    #     UPDATE xliff_record r
    #     SET document_id = d.parent_id
    #     FROM xliff_document d
    #     WHERE r.document_id = d.id
    # ''')
    # op.drop_table('xliff_record')
    # op.drop_table('xliff_document')

    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('xliff_record', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False))
    # op.add_column('xliff_record', sa.Column('target', sa.VARCHAR(), autoincrement=False, nullable=False))
    # op.drop_constraint(None, 'xliff_record', type_='foreignkey')
    # op.drop_column('xliff_record', 'parent_id')
    # op.add_column('xliff_document', sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False))
    # op.add_column('xliff_document', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    # op.add_column('xliff_document', sa.Column('processing_status', sa.VARCHAR(), autoincrement=False, nullable=False))
    # op.add_column('xliff_document', sa.Column('upload_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    # op.drop_constraint(None, 'xliff_document', type_='foreignkey')
    # op.create_foreign_key('xliff_document_user_id_key', 'xliff_document', 'user', ['created_by'], ['id'])
    # op.drop_column('xliff_document', 'parent_id')
    # op.create_table('xliff_record_to_tmx',
    #     sa.Column('xliff_id', sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column('tmx_id', sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.ForeignKeyConstraint(['tmx_id'], ['tmx_document.id'], name='xliff_record_to_tmx_tmx_id_fkey'),
    #     sa.ForeignKeyConstraint(['xliff_id'], ['xliff_document.id'], name='xliff_record_to_tmx_xliff_id_fkey')
    # )
    # op.drop_table('document_record')
    # op.drop_table('doc_to_tmx')
    # op.drop_table('document')
    # ### end Alembic commands ###
