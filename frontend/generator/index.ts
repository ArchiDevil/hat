import commandLineArgs from 'command-line-args'
import {mkdirSync, rmdirSync, writeFileSync} from 'fs'

interface ApiDescription {
  info: {
    title: string
    version: string
  }
  paths: Array<{
    [path: string]: {
      [method: string]: {
        summary: string
        operationId: string
        responses: {
          [status: string]: {
            description: string
          }
        }
      }
    }
  }>
  components: {
    schemas: {
      [name: string]: {
        type: string
        properties: {
          [name: string]: {
            type: string
            description: string
          }
        }
      }
    }
  }
}

function openapiTypeToTypescript(type: string): string {
  switch (type) {
    case 'string':
      return 'string'
    case 'integer':
    case 'number':
      return 'number'
    case 'boolean':
      return 'boolean'
    default:
      return 'any'
  }
}

function genSchemas(output: string, schemas: any) {
  rmdirSync(output, {recursive: true})
  mkdirSync(output, {recursive: true})
  for (const schema in schemas) {
    const fileName = `${output}/${schema}.ts`
    let fileContent = `// This file is autogenerated, do not edit directly.\n\n`
    fileContent += `export interface ${schema} {\n`
    const props = schemas[schema].properties
    for (const property in props) {
      fileContent += `  ${property}: ${openapiTypeToTypescript(
        props[property].type
      )}\n`
    }
    fileContent += `}\n`
    writeFileSync(fileName, fileContent)
  }
}

function main() {
  const options = commandLineArgs([
    {name: 'input', alias: 'i', type: String},
    {name: 'output', alias: 'o', type: String},
  ])

  fetch(options.input)
    .then((response) => {
      response.json().then((data: ApiDescription) => {
        console.log('========================================')
        console.log('API Description')
        console.log('========================================')
        for (const path in data.paths) {
          for (const method in data.paths[path]) {
            console.log(
              `${method.toUpperCase()} ${path}`,
              data.paths[path][method].summary
            )
          }
        }
        console.log('========================================')
        console.log('Schemas')
        console.log('========================================')
        const schemas = data.components.schemas
        for (const schema in schemas) {
          console.log(schema)
          const props = schemas[schema].properties
          for (const prop in props) {
            console.log(
              `  ${prop} (${props[prop].type}): ${props[prop].description}`
            )
          }
        }

        console.log('Creating interfaces...')
        genSchemas(options.output, data.components.schemas)
      })
    })
    .catch((error) => {
      console.error('Failure:', error)
    })
}

main()
